modules = ["python-3.11"]

[nix]
channel = "stable-24_05"

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start Flask App"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Run DB Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Flask Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Run Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Merge Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "DB Upgrade"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Flask App"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Create Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Apply Migration"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Insert Categories"

[[workflows.workflow]]
name = "Start Flask App"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python main.py"
waitForPort = 5000

[[workflows.workflow]]
name = "Run DB Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db upgrade"

[[workflows.workflow]]
name = "Flask Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python main.py"
waitForPort = 5000

[[workflows.workflow]]
name = "Run Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db upgrade"

[[workflows.workflow]]
name = "Merge Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db merge heads -m 'merge multiple heads'"

[[workflows.workflow]]
name = "DB Upgrade"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db upgrade"

[[workflows.workflow]]
name = "Flask App"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python main.py"
waitForPort = 5000

[[workflows.workflow]]
name = "Create Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db migrate -m 'add fuel expense fields'"

[[workflows.workflow]]
name = "Apply Migration"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "flask db upgrade"

[[workflows.workflow]]
name = "Insert Categories"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

python3 -c \"
from app import app, db
from models import ExpenseCategory
with app.app_context():
    # Add fuel categories if they don't exist
    fuel_categories = [
        ('Car Fuel - Gasoline', True),
        ('Car Fuel - Diesel', True),
        ('Car Fuel - Biodiesel', True)
    ]
    
    for name, is_fuel in fuel_categories:
        if not ExpenseCategory.query.filter_by(name=name).first():
            category = ExpenseCategory(name=name, is_fuel=True)
            db.session.add(category)
    
    db.session.commit()
\"
"""

[deployment]
run = ["sh", "-c", "python main.py"]

[[ports]]
localPort = 5000
externalPort = 80
